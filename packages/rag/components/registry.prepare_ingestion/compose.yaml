compose:
  - call: lcod://tooling/script@1
    in:
      source: |
        async ({ state }, { imports }) => {
          const ensureString = (value) => (typeof value === 'string' && value.length > 0 ? value : null);
          const joinRelative = async (baseDir, segment) => {
            const resolvedBase = ensureString(baseDir) || '.';
            try {
              const joined = await imports.pathJoin({ base: resolvedBase, segment });
              return joined?.path || joined || segment;
            } catch (_) {
              return segment;
            }
          };

          const projectBase = ensureString(state.projectPath) || ensureString(state.cwd) || '.';
          const ragRoot =
            ensureString(state.ragRoot) ||
            await joinRelative(projectBase, 'packages/rag');
          const base = ensureString(ragRoot) || projectBase;

          let composePath = null;
          try {
            const result = await imports.pathJoin({
              base,
              segment: 'components/registry.register_helpers/compose.yaml'
            });
            composePath = result?.path || result || null;
          } catch (_) {
            composePath = null;
          }

          const helperRegistration = composePath
            ? [{ id: 'lcod://rag/registry/register_helpers@0.1.0', composePath }]
            : [];

          const snapshotPath =
            ensureString(state.snapshotPath) ||
            await joinRelative(base, 'data/registry.snapshot.json');

          const cacheDir =
            ensureString(state.cacheDir) ||
            await joinRelative(base, '.lcod/cache');

          const cataloguesUrl =
            ensureString(state.cataloguesUrl) ||
            'https://raw.githubusercontent.com/lcod-team/lcod-registry/main/catalogues.json';

          const cataloguesPath = ensureString(state.cataloguesPath) || null;
          const projectPath = ensureString(state.projectPath) || projectBase;
          const cwd = ensureString(state.cwd) || projectPath;

          return {
            helperRegistration,
            effectiveRagRoot: base,
            effectiveSnapshotPath: snapshotPath,
            effectiveCacheDir: cacheDir,
            effectiveCataloguesUrl: cataloguesUrl,
            effectiveCataloguesPath: cataloguesPath,
            effectiveProjectPath: projectPath,
            effectiveCwd: cwd
          };
        }
      input:
        ragRoot: $.ragRoot
        projectPath: $.projectPath
        cwd: $.cwd
        snapshotPath: $.snapshotPath
        cacheDir: $.cacheDir
        cataloguesUrl: $.cataloguesUrl
        cataloguesPath: $.cataloguesPath
      imports:
        pathJoin: lcod://axiom/path/join@1
    out:
      helperRegistration: helperRegistration
      ragRootResolved: effectiveRagRoot
      snapshotPathResolved: effectiveSnapshotPath
      cacheDirResolved: effectiveCacheDir
      cataloguesUrlResolved: effectiveCataloguesUrl
      cataloguesPathResolved: effectiveCataloguesPath
      projectPathResolved: effectiveProjectPath
      cwdResolved: effectiveCwd

  - call: lcod://tooling/resolver/register@1
    in:
      components: $.helperRegistration
    out:
      helperRegistered: bootstrapRegistered
      helperRegisterWarnings: bootstrapWarnings

  - call: lcod://rag/registry/register_helpers@0.1.0
    in:
      ragRoot: $.ragRootResolved
    out:
      helperRegistered: registered
      helperWarnings: helperWarnings

  - call: lcod://rag/registry/snapshot_read@0.1.0
    in:
      path: $.snapshotPathResolved
      warningMessage: $.missingSnapshotWarning
    out:
      snapshot: previousSnapshot
      exists: previousExists
      warnings: readWarnings

  - call: lcod://rag/registry/collect_components@0.1.0
    in:
      projectPath: $.projectPathResolved
      cataloguesPath: $.cataloguesPathResolved
      cataloguesUrl: $.cataloguesUrlResolved
      sourceId: $.sourceId
      cacheDir: $.cacheDirResolved
      cwd: $.cwdResolved
      specRoot: $.specRoot
      ragRoot: $.ragRootResolved
      repoRoots: $.repoRoots
    out:
      components: components
      warnings: collectWarnings
      componentCount: componentCount
      cataloguesCount: cataloguesCount

  - call: lcod://rag/registry/snapshot_from_components@0.1.0
    in:
      components: $.components
    out:
      snapshot: currentSnapshot
      entries: snapshotEntries

  - call: lcod://rag/registry/diff_snapshots@0.1.0
    in:
      previous: $.previousSnapshot
      current: $.currentSnapshot
    out:
      added: added
      removed: removed
      updated: updated
      unchanged: unchanged

  - call: lcod://tooling/value/default_array@0.1.0
    in:
      value: $.readWarnings
    out:
      accumulatedWarnings: resolved

  - call: lcod://tooling/value/default_array@0.1.0
    in:
      value: $.collectWarnings
    out:
      collectWarningsList: resolved

  - call: lcod://tooling/value/default_array@0.1.0
    in:
      value: $.bootstrapWarnings
    out:
      bootstrapWarningsList: resolved

  - call: lcod://tooling/value/default_array@0.1.0
    in:
      value: $.helperWarnings
    out:
      helperWarningsList: resolved

  - call: lcod://tooling/array/append@0.1.0
    in:
      items: $.accumulatedWarnings
      values: $.collectWarningsList
    out:
      warnings: items

  - call: lcod://tooling/array/append@0.1.0
    in:
      items: $.warnings
      values: $.bootstrapWarningsList
    out:
      warnings: items

  - call: lcod://tooling/array/append@0.1.0
    in:
      items: $.warnings
      values: $.helperWarningsList
    out:
      warnings: items

  - call: lcod://rag/array/compact@0.1.0
    in:
      items: $.warnings
    out:
      warnings: values

  - call: lcod://impl/set@1
    in:
      components: $.components
      snapshot: $.currentSnapshot
      snapshotEntries: $.snapshotEntries
      diff:
        added: $.added
        removed: $.removed
        updated: $.updated
        unchanged: $.unchanged
      previousExists: $.previousExists
      warnings: $.warnings
      componentCount: $.componentCount
      cataloguesCount: $.cataloguesCount
      snapshotPath: $.snapshotPathResolved
      cacheDir: $.cacheDirResolved
    out:
      components: components
      snapshot: snapshot
      snapshotEntries: snapshotEntries
      diff: diff
      previousExists: previousExists
      warnings: warnings
      componentCount: componentCount
      cataloguesCount: cataloguesCount
      snapshotPath: snapshotPath
      cacheDir: cacheDir
