schemaVersion = "2.0"
id = "lcod://rag/registry/search_components@0.1.0"
version = "0.1.0"
kind = "component"
summary = "Search LCOD registry documentation chunks using a natural language query."

[palette]
category = "RAG"
icon = "mdi:text-search"
tags = ["registry", "search", "rag"]

[inputs.query]
summary = "Natural language query used to search component documentation."
required = true
schema = """
{
  "type": "string",
  "minLength": 1
}
"""

[inputs.topK]
summary = "Maximum number of matches to return."
required = false
schema = """
{
  "type": ["integer", "null"],
  "minimum": 1
}
"""

[inputs.scoreThreshold]
summary = "Optional minimum similarity score; lower matches are filtered out."
required = false
schema = """
{
  "type": ["number", "null"]
}
"""

[inputs.qdrantUrl]
summary = "Base URL for the Qdrant HTTP API (defaults to $QDRANT_URL or http://localhost:6333)."
required = false
schema = """
{
  "type": ["string", "null"]
}
"""

[inputs.collection]
summary = "Target Qdrant collection (defaults to $QDRANT_COLLECTION or lcod_docs)."
required = false
schema = """
{
  "type": ["string", "null"]
}
"""

[inputs.apiKey]
summary = "Optional Qdrant API key forwarded as the `api-key` header."
required = false
schema = """
{
  "type": ["string", "null"]
}
"""

[inputs.ollamaBaseUrl]
summary = "Base URL for the Ollama server used to embed the query (defaults to $OLLAMA_BASE_URL or http://localhost:11434)."
required = false
schema = """
{
  "type": ["string", "null"]
}
"""

[inputs.embeddingModel]
summary = "Name of the Ollama embedding model (defaults to $RAG_EMBED_MODEL, $OLLAMA_EMBED_MODEL or nomic-embed-text)."
required = false
schema = """
{
  "type": ["string", "null"]
}
"""

[inputs.embeddingTimeoutMs]
summary = "HTTP timeout in milliseconds for the embedding request."
required = false
schema = """
{
  "type": ["integer", "null"],
  "minimum": 1000
}
"""

[inputs.embeddingMaxRetries]
summary = "Number of retry attempts for the embedding request."
required = false
schema = """
{
  "type": ["integer", "null"],
  "minimum": 0
}
"""

[inputs.searchTimeoutMs]
summary = "HTTP timeout in milliseconds for the Qdrant search request."
required = false
schema = """
{
  "type": ["integer", "null"],
  "minimum": 1000
}
"""

[inputs.filter]
summary = "Optional Qdrant filter object to restrict the search scope."
required = false
schema = """
{
  "type": ["object", "null"]
}
"""

[outputs.matches]
summary = "Ordered search matches returned by Qdrant (best score first)."
schema = """
{
  "type": "array",
  "items": { "type": "object" }
}
"""

[outputs.matchCount]
summary = "Number of matches returned after optional score filtering."
schema = """
{
  "type": "integer"
}
"""

[outputs.queryVector]
summary = "Embedding vector produced for the natural language query."
schema = """
{
  "type": ["array", "null"],
  "items": { "type": "number" }
}
"""

[outputs.dimension]
summary = "Vector dimensionality reported for the query embedding."
schema = """
{
  "type": "integer"
}
"""

[outputs.warnings]
summary = "Warnings produced while embedding the query or querying Qdrant."
schema = """
{
  "type": "array",
  "items": { "type": "string" }
}
"""

[outputs.queryText]
summary = "Normalised query text forwarded to the embedding request."
schema = """
{
  "type": ["string", "null"]
}
"""

[documentation]
body = """
Search LCOD registry documentation chunks stored in Qdrant from a natural
language query. The component embeds the query with the same Ollama model used
by the ingestion pipeline, executes a vector search against Qdrant and returns
the scored matches together with their metadata.

### Flow

1. Normalise the incoming query and reject empty payloads.
2. Reuse `lcod://rag/ingest/embed_chunks@0.1.0` to obtain the embedding vector
   from Ollama.
3. Post a `/collections/{collection}/points/search` request to Qdrant
   (defaults to the `QDRANT_URL`/`QDRANT_COLLECTION` environment variables).
4. Filter and return the matches ordered by relevance together with the stored
   payload (component identifiers, documentation metadata, raw chunk text).

### Example

```yaml
compose:
  - call: lcod://rag/registry/search_components@0.1.0
    in:
      query: "How do I merge two objects in LCOD?"
      topK: 8
      scoreThreshold: 0.4
```

The component returns scored matches that IDE helpers can surface to developers
alongside the component identifiers and documentation excerpts.
"""
